#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä bundle, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –¥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
 */

console.log('üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ node_modules
function checkNodeModulesSize() {
  try {
    const nodeModulesPath = path.join(process.cwd(), 'node_modules');
    if (fs.existsSync(nodeModulesPath)) {
      const size = execSync(`du -sh ${nodeModulesPath} 2>/dev/null || echo "0"`, {
        encoding: 'utf8',
      }).trim();
      console.log(`üì¶ –†–∞–∑–º–µ—Ä node_modules: ${size}`);
    }
  } catch (error) {
    console.log('üì¶ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä node_modules');
  }
}

// –ê–Ω–∞–ª–∏–∑ package.json
function analyzePackageJson() {
  const packagePath = path.join(process.cwd(), 'package.json');
  if (!fs.existsSync(packagePath)) {
    console.log('‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }

  const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  const dependencies = packageJson.dependencies || {};
  const devDependencies = packageJson.devDependencies || {};

  console.log(`\nüìã –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:`);
  console.log(`   ‚Ä¢ –†–∞–±–æ—á–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${Object.keys(dependencies).length}`);
  console.log(`   ‚Ä¢ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${Object.keys(devDependencies).length}`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  const heavyDependencies = [
    'lodash',
    'moment',
    'rxjs',
    'date-fns',
    'axios',
    'firebase',
    'vue',
    'quasar',
  ];

  const foundHeavy = heavyDependencies.filter((dep) => dependencies[dep] || devDependencies[dep]);

  if (foundHeavy.length > 0) {
    console.log(`   ‚Ä¢ –¢—è–∂–µ–ª—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${foundHeavy.join(', ')}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  const potentialDuplicates = [
    ['lodash', 'lodash-es'],
    ['moment', 'date-fns'],
    ['axios', 'fetch'],
  ];

  potentialDuplicates.forEach(([dep1, dep2]) => {
    if (
      (dependencies[dep1] || devDependencies[dep1]) &&
      (dependencies[dep2] || devDependencies[dep2])
    ) {
      console.log(`   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç: ${dep1} –∏ ${dep2}`);
    }
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ dist –ø–∞–ø–∫–∏
function checkDistSize() {
  const distPath = path.join(process.cwd(), 'dist');
  if (fs.existsSync(distPath)) {
    try {
      const size = execSync(`du -sh ${distPath} 2>/dev/null || echo "0"`, {
        encoding: 'utf8',
      }).trim();
      console.log(`\nüìÅ –†–∞–∑–º–µ—Ä dist –ø–∞–ø–∫–∏: ${size}`);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ JS —Ñ–∞–π–ª–æ–≤
      const jsFiles = execSync(`find ${distPath} -name "*.js" -type f 2>/dev/null || echo ""`, {
        encoding: 'utf8',
      }).trim();
      if (jsFiles) {
        const jsCount = jsFiles.split('\n').filter((f) => f.trim()).length;
        console.log(`   ‚Ä¢ JS —Ñ–∞–π–ª–æ–≤: ${jsCount}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Ñ–∞–π–ª–æ–≤
      const cssFiles = execSync(`find ${distPath} -name "*.css" -type f 2>/dev/null || echo ""`, {
        encoding: 'utf8',
      }).trim();
      if (cssFiles) {
        const cssCount = cssFiles.split('\n').filter((f) => f.trim()).length;
        console.log(`   ‚Ä¢ CSS —Ñ–∞–π–ª–æ–≤: ${cssCount}`);
      }
    } catch (error) {
      console.log('üìÅ –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å dist –ø–∞–ø–∫—É');
    }
  } else {
    console.log('\nüìÅ Dist –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä–∫—É: npm run build');
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
function checkConfig() {
  console.log(`\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ quasar.config.ts
  const quasarConfigPath = path.join(process.cwd(), 'quasar.config.ts');
  if (fs.existsSync(quasarConfigPath)) {
    const config = fs.readFileSync(quasarConfigPath, 'utf8');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    const optimizations = [
      { key: 'preFetch', check: /preFetch:\s*true/, message: 'Prefetch –≤–∫–ª—é—á–µ–Ω' },
      { key: 'minify', check: /minify:\s*true/, message: 'Minification –≤–∫–ª—é—á–µ–Ω' },
      { key: 'manualChunks', check: /manualChunks/, message: 'Manual chunks –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
      { key: 'terserOptions', check: /terserOptions/, message: 'Terser options –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
    ];

    optimizations.forEach((opt) => {
      if (opt.check.test(config)) {
        console.log(`   ‚úÖ ${opt.message}`);
      } else {
        console.log(`   ‚ùå ${opt.message} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }
    });
  } else {
    console.log('   ‚ùå quasar.config.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
function showRecommendations() {
  console.log(`\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`);

  const recommendations = [
    '1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ bundle: npm run build:analyze',
    '2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npx depcheck',
    '3. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ WebP —Ñ–æ—Ä–º–∞—Ç',
    '4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Service Worker –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
    '5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ lazy loading –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
    '6. –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–ø—Ä–µ—Å—Å–∏—é gzip/brotli –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
    '7. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ Firebase –∏–º–ø–æ—Ä—Ç—ã',
    '8. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤',
    '9. –î–æ–±–∞–≤—å—Ç–µ debounce –¥–ª—è –ø–æ–∏—Å–∫–∞',
    '10. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
  ];

  recommendations.forEach((rec) => {
    console.log(`   ‚Ä¢ ${rec}`);
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
function checkPerformanceFiles() {
  console.log(`\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:`);

  const files = [
    { path: 'PERFORMANCE_OPTIMIZATION.md', name: '–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏' },
    { path: 'src/composables/useCache.ts', name: '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ' },
    { path: 'src/components/VirtualizedList.vue', name: '–í–∏—Ä—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫' },
  ];

  files.forEach((file) => {
    const filePath = path.join(process.cwd(), file.path);
    if (fs.existsSync(filePath)) {
      console.log(`   ‚úÖ ${file.name} - —Å–æ–∑–¥–∞–Ω`);
    } else {
      console.log(`   ‚ùå ${file.name} - –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  checkNodeModulesSize();
  analyzePackageJson();
  checkDistSize();
  checkConfig();
  checkPerformanceFiles();
  showRecommendations();

  console.log(`\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ PERFORMANCE_OPTIMIZATION.md`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main();
